#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WaterBottles
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WaterBottles")]
	public partial class WaterBottlesDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBottle(Bottle instance);
    partial void UpdateBottle(Bottle instance);
    partial void DeleteBottle(Bottle instance);
    partial void InsertBottleType(BottleType instance);
    partial void UpdateBottleType(BottleType instance);
    partial void DeleteBottleType(BottleType instance);
    partial void InsertBottlePhoto(BottlePhoto instance);
    partial void UpdateBottlePhoto(BottlePhoto instance);
    partial void DeleteBottlePhoto(BottlePhoto instance);
    #endregion
		
		public WaterBottlesDataContextDataContext() : 
				base(global::WaterBottles.Properties.Settings.Default.WaterBottlesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WaterBottlesDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WaterBottlesDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WaterBottlesDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WaterBottlesDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bottle> Bottle
		{
			get
			{
				return this.GetTable<Bottle>();
			}
		}
		
		public System.Data.Linq.Table<BottleType> BottleType
		{
			get
			{
				return this.GetTable<BottleType>();
			}
		}
		
		public System.Data.Linq.Table<BottlePhoto> BottlePhoto
		{
			get
			{
				return this.GetTable<BottlePhoto>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bottle")]
	public partial class Bottle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BottleId;
		
		private int _TypeId;
		
		private string _Description;
		
		private int _Quantity;
		
		private int _QuantityOfFull;
		
		private EntitySet<BottlePhoto> _BottlePhoto;
		
		private EntityRef<BottleType> _BottleType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBottleIdChanging(int value);
    partial void OnBottleIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnQuantityOfFullChanging(int value);
    partial void OnQuantityOfFullChanged();
    #endregion
		
		public Bottle()
		{
			this._BottlePhoto = new EntitySet<BottlePhoto>(new Action<BottlePhoto>(this.attach_BottlePhoto), new Action<BottlePhoto>(this.detach_BottlePhoto));
			this._BottleType = default(EntityRef<BottleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BottleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BottleId
		{
			get
			{
				return this._BottleId;
			}
			set
			{
				if ((this._BottleId != value))
				{
					this.OnBottleIdChanging(value);
					this.SendPropertyChanging();
					this._BottleId = value;
					this.SendPropertyChanged("BottleId");
					this.OnBottleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._BottleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityOfFull", DbType="Int NOT NULL")]
		public int QuantityOfFull
		{
			get
			{
				return this._QuantityOfFull;
			}
			set
			{
				if ((this._QuantityOfFull != value))
				{
					this.OnQuantityOfFullChanging(value);
					this.SendPropertyChanging();
					this._QuantityOfFull = value;
					this.SendPropertyChanged("QuantityOfFull");
					this.OnQuantityOfFullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bottle_BottlePhoto", Storage="_BottlePhoto", ThisKey="BottleId", OtherKey="BottleId")]
		public EntitySet<BottlePhoto> BottlePhoto
		{
			get
			{
				return this._BottlePhoto;
			}
			set
			{
				this._BottlePhoto.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BottleType_Bottle", Storage="_BottleType", ThisKey="TypeId", OtherKey="BottleTypeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BottleType BottleType
		{
			get
			{
				return this._BottleType.Entity;
			}
			set
			{
				BottleType previousValue = this._BottleType.Entity;
				if (((previousValue != value) 
							|| (this._BottleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BottleType.Entity = null;
						previousValue.Bottle.Remove(this);
					}
					this._BottleType.Entity = value;
					if ((value != null))
					{
						value.Bottle.Add(this);
						this._TypeId = value.BottleTypeId;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("BottleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BottlePhoto(BottlePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Bottle = this;
		}
		
		private void detach_BottlePhoto(BottlePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Bottle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BottleType")]
	public partial class BottleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BottleTypeId;
		
		private int _Volume;
		
		private EntitySet<Bottle> _Bottle;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBottleTypeIdChanging(int value);
    partial void OnBottleTypeIdChanged();
    partial void OnVolumeChanging(int value);
    partial void OnVolumeChanged();
    #endregion
		
		public BottleType()
		{
			this._Bottle = new EntitySet<Bottle>(new Action<Bottle>(this.attach_Bottle), new Action<Bottle>(this.detach_Bottle));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BottleTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BottleTypeId
		{
			get
			{
				return this._BottleTypeId;
			}
			set
			{
				if ((this._BottleTypeId != value))
				{
					this.OnBottleTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BottleTypeId = value;
					this.SendPropertyChanged("BottleTypeId");
					this.OnBottleTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Int NOT NULL")]
		public int Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BottleType_Bottle", Storage="_Bottle", ThisKey="BottleTypeId", OtherKey="TypeId")]
		public EntitySet<Bottle> Bottle
		{
			get
			{
				return this._Bottle;
			}
			set
			{
				this._Bottle.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bottle(Bottle entity)
		{
			this.SendPropertyChanging();
			entity.BottleType = this;
		}
		
		private void detach_Bottle(Bottle entity)
		{
			this.SendPropertyChanging();
			entity.BottleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BottlePhoto")]
	public partial class BottlePhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoId;
		
		private int _BottleId;
		
		private string _PhotoUrl;
		
		private EntityRef<Bottle> _Bottle;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnBottleIdChanging(int value);
    partial void OnBottleIdChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    #endregion
		
		public BottlePhoto()
		{
			this._Bottle = default(EntityRef<Bottle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BottleId", DbType="Int NOT NULL")]
		public int BottleId
		{
			get
			{
				return this._BottleId;
			}
			set
			{
				if ((this._BottleId != value))
				{
					if (this._Bottle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBottleIdChanging(value);
					this.SendPropertyChanging();
					this._BottleId = value;
					this.SendPropertyChanged("BottleId");
					this.OnBottleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bottle_BottlePhoto", Storage="_Bottle", ThisKey="BottleId", OtherKey="BottleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Bottle Bottle
		{
			get
			{
				return this._Bottle.Entity;
			}
			set
			{
				Bottle previousValue = this._Bottle.Entity;
				if (((previousValue != value) 
							|| (this._Bottle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bottle.Entity = null;
						previousValue.BottlePhoto.Remove(this);
					}
					this._Bottle.Entity = value;
					if ((value != null))
					{
						value.BottlePhoto.Add(this);
						this._BottleId = value.BottleId;
					}
					else
					{
						this._BottleId = default(int);
					}
					this.SendPropertyChanged("Bottle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
